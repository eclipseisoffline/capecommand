import me.modmuss50.mpp.ReleaseType

plugins {
    id 'me.modmuss50.mod-publish-plugin' version '0.8.4'
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    maven {
        url = uri("https://repo.opencollab.dev/main/")
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    compileOnly "org.geysermc.geyser:api:${project.geyser_api_version}"
}

loom {
    accessWidenerPath = file("src/main/resources/capecommand.accesswidener")
}

processResources {
    inputs.property "version", project.version
    inputs.property "supported_versions", project.supported_versions
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "supported_versions": project.supported_versions,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

publishing {
    repositories {
        maven {
            name = "eclipseisoffline"
            url = "https://maven.eclipseisoffline.xyz/releases"
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }

    publications {
        maven(MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }
}

publish {
    dependsOn("publishMods")
}

publishMods {
    changelog = new File("CHANGELOG.md").text
    type = ReleaseType.of(release_type)

    file = remapJar.archiveFile
    modLoaders.add("fabric")

    modrinth {
        accessToken = providers.gradleProperty("MODRINTH_API_TOKEN")
        projectId = "Ck0I4Uep"
        minecraftVersions.addAll(release_minecraft_versions.split(","))
    }

    github {
        accessToken = providers.gradleProperty("GITHUB_API_PUBLISH_TOKEN")
        repository = "eclipseisoffline/capecommand"
        commitish = "main"
    }
}
